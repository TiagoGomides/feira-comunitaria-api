generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String         @id @default(uuid())
  fullName     String
  email        String         @unique
  password     String
  reputation   Int            @default(0)
  images       UserImage[]
  createdAt    DateTime       @default(now())

  items        Item[]         @relation("UserItems")
  proposals    ExchangeProposal[] @relation("Proposer")
  received     ExchangeProposal[] @relation("Receiver")
  ratingsGiven Rating[]       @relation("RatingsFrom")
  ratingsReceived Rating[]    @relation("RatingsTo")
}

model UserImage {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  image     Bytes    
  mimeType  String   
  createdAt DateTime @default(now())
}

model Item {
  id          String   @id @default(uuid())
  owner       User     @relation("UserItems", fields: [ownerId], references: [id])
  ownerId     String
  name        String
  description String
  category    String
  size        String
  condition   String
  status      ItemStatus     @default(AVAILABLE)
  createdAt   DateTime       @default(now())

  images        ItemImage[]
  proposerIn    ExchangeProposal? @relation("ProposerItem")
  receiverIn    ExchangeProposal? @relation("ReceiverItem")
}


model ItemImage {
  id        String   @id @default(uuid())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  imageUrl  String   
  imageType String
  createdAt DateTime @default(now())
}

model ExchangeProposal {
  id              String   @id @default(uuid())
  proposer        User     @relation("Proposer", fields: [proposerId], references: [id])
  proposerId      String
  receiver        User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId      String

  proposerItem    Item     @relation("ProposerItem", fields: [proposerItemId], references: [id])
  proposerItemId  String   @unique

  receiverItem    Item     @relation("ReceiverItem", fields: [receiverItemId], references: [id])
  receiverItemId  String   @unique

  status          ProposalStatus @default(PENDING)
  message         String?
  createdAt       DateTime       @default(now())
}


model Rating {
  id          String   @id @default(uuid())
  fromUser    User     @relation("RatingsFrom", fields: [fromUserId], references: [id])
  fromUserId  String
  toUser      User     @relation("RatingsTo", fields: [toUserId], references: [id])
  toUserId    String
  score       Int
  comment     String?
  createdAt   DateTime @default(now())
}

enum ItemStatus {
  AVAILABLE
  PENDING_EXCHANGE
  EXCHANGED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
